IN Pg/MySQl/ Vsd/ Pychram
CREATE DATABASE access_logs;
USE access_logs;

CREATE TABLE access_logs(
id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
ip VARCHAR(45) NOT NULL,
date DATETIME NOT NULL,
method VARCHAR(10) NOT NULL,
url TEXT NOT NULL,
status INT(11) NOT NULL,
user_agent TEXT NOT NULL
);


#Для хранения настроек будем использовать JSON файл. Создадим файл config.json со следующим содержимым:

{
"log_dir": "/var/log/apache2/",
"log_mask": "access.log*",
"db": {
"host": "localhost",
"username": "root",
"password": "password",
"database": "access_logs"
}
}

Для разбора логов будем использовать модуль argparse для обработки аргументов командной строки. Создадим файл main.py и добавим в него следующий код:

import os
import json
import argparse
from datetime import datetime
import pymysql

читаем настройки из файла config.json
with open('config.json', 'r') as config_file:
config = json.load(config_file)

соединяемся с базой данных
connection = pymysql.connect(config['db']['host'],
config['db']['username'],
config['db']['password'],
config['db']['database'],
autocommit=True)

создаем курсор для выполнения запросов
cursor = connection.cursor()

создаем функцию для чтения access логов
def read_logs(log_dir, log_mask):
    for filename in os.listdir(log_dir):
        if filename.startswith(log_mask):
            with open(os.path.join(log_dir, filename), 'r') as logfile:
                for line in logfile:
# разбираем строку лога
                line_parts = line.split()
                date = datetime.strptime(line_parts[3][1:], "%d/%b/%Y:%H:%M:%S")
                method = line_parts[5][1:]
                url = line_parts[6]
                status = int(line_parts[8])
                user_agent = ' '.join(line_parts[11:])


# сохраняем данные в базу данных
cursor.execute("""
                    INSERT INTO access_logs
                    (ip, date, method, url, status, user_agent)
                    VALUES (%s, %s, %s, %s, %s, %s)
""", (line_parts[0], date, method, url, status, user_agent))
#обработка аргументов командной строки
parser = argparse.ArgumentParser(description='Access log aggregator')
parser.add_argument('--force', dest='force', action='store_true',
help='process all access logs (not using cron)')
args = parser.parse_args()

#если не указана опция --force, то завершаем работу
if not args.force:
    print('Use --force to process all access logs')
exit()

#разбираем access логи и сохраняем данные в базу данных
read_logs(config['log_dir'], config['log_mask'])
print('Logs processed successfully')

#создаем функцию для просмотра данных в базе данных
def view_logs(group_by, start_date=None
